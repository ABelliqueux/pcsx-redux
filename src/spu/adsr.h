/***************************************************************************
                           adsr.h  -  description
                             -------------------
    begin                : Wed May 15 2002
    copyright            : (C) 2002 by Pete Bernert
    email                : BlackDove@addcom.de
 ***************************************************************************/

/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version. See also the license.txt file for *
 *   additional informations.                                              *
 *                                                                         *
 ***************************************************************************/

//*************************************************************************//
// History of changes:
//
// 2002/05/15 - Pete
// - generic cleanup for the Peops release
//
//*************************************************************************//

#pragma once

#include "spu/externals.h"
#include "spu/types.h"

namespace PCSX {

namespace SPU {

class ADSR {
  public:
    void start(SPUCHAN* pChannel);
    int mix(SPUCHAN* pChannel);

  private:
    static inline const uint32_t m_tableDisp[] = {
        -0x18 + 0 + 32, -0x18 + 4 + 32,  -0x18 + 6 + 32,  -0x18 + 8 + 32,  // release/decay
        -0x18 + 9 + 32, -0x18 + 10 + 32, -0x18 + 11 + 32, -0x18 + 12 + 32,

        -0x1B + 0 + 32, -0x1B + 4 + 32,  -0x1B + 6 + 32,  -0x1B + 8 + 32,  // sustain
        -0x1B + 9 + 32, -0x1B + 10 + 32, -0x1B + 11 + 32, -0x1B + 12 + 32,
    };

    class Table {
      public:
        Table();
        const uint32_t& operator[](size_t index) const { return m_table[index]; }

      private:
        uint32_t m_table[160];
    };

    const Table m_table;

    // 0-47   1
    // 48-127 1 << ((RATE >> 2) - 11)
    int32_t m_denominator[128] = {
        1,      1,      1,      1,      1,      1,      1,      1,       1,       1,       1,      1,      1,
        1,      1,      1,      1,      1,      1,      1,      1,       1,       1,       1,      1,      1,
        1,      1,      1,      1,      1,      1,      1,      1,       1,       1,       1,      1,      1,
        1,      1,      1,      1,      1,      1,      1,      1,       1,       2,       2,      2,      2,
        4,      4,      4,      4,      8,      8,      8,      8,       16,      16,      16,     16,     32,
        32,     32,     32,     64,     64,     64,     64,     128,     128,     128,     128,    256,    256,
        256,    256,    512,    512,    512,    512,    1024,   1024,    1024,    1024,    2048,   2048,   2048,
        2048,   4096,   4096,   4096,   4096,   8192,   8192,   8192,    8192,    16384,   16384,  16384,  16384,
        32768,  32768,  32768,  32768,  65536,  65536,  65536,  65536,   131072,  131072,  131072, 131072, 262144,
        262144, 262144, 262144, 524288, 524288, 524288, 524288, 1048576, 1048576, 1048576, 1048576};

    // 0-47   (7 - (RATE & 3)) << (11 - (RATE >> 2))
    // 48-127  7 - (RATE & 3)
    int32_t m_numeratorIncrease[128] = {
        14336, 12288, 10240, 8192, 7168, 6144, 5120, 4096, 3584, 3072, 2560, 2048, 1792, 1536, 1280, 1024,
        896,   768,   640,   512,  448,  384,  320,  256,  224,  192,  160,  128,  112,  96,   80,   64,
        56,    48,    40,    32,   28,   24,   20,   16,   14,   12,   10,   8,    7,    6,    5,    4,
        7,     6,     5,     4,    7,    6,    5,    4,    7,    6,    5,    4,    7,    6,    5,    4,
        7,     6,     5,     4,    7,    6,    5,    4,    7,    6,    5,    4,    7,    6,    5,    4,
        7,     6,     5,     4,    7,    6,    5,    4,    7,    6,    5,    4,    7,    6,    5,    4,
        7,     6,     5,     4,    7,    6,    5,    4,    7,    6,    5,    4,    7,    6,    5,    4,
        7,     6,     5,     4,    7,    6,    5,    4,    7,    6,    5,    4,    7,    6,    5,    4};

    // 0-47  (-8 + (RATE & 3)) << (11 - (RATE >> 2))
    // 48-127 -8 + (RATE & 3)
    int32_t m_numeratorDecrease[128] = {
        -16384, -14336, -12288, -10240, -8192, -7168, -6144, -5120, -4096, -3584, -3072, -2560, -2048, -1792, -1536,
        -1280,  -1024,  -896,   -768,   -640,  -512,  -448,  -384,  -320,  -256,  -224,  -192,  -160,  -128,  -112,
        -96,    -80,    -64,    -56,    -48,   -40,   -32,   -28,   -24,   -20,   -16,   -14,   -12,   -10,   -8,
        -7,     -6,     -5,     -8,     -7,    -6,    -5,    -8,    -7,    -6,    -5,    -8,    -7,    -6,    -5,
        -8,     -7,     -6,     -5,     -8,    -7,    -6,    -5,    -8,    -7,    -6,    -5,    -8,    -7,    -6,
        -5,     -8,     -7,     -6,     -5,    -8,    -7,    -6,    -5,    -8,    -7,    -6,    -5,    -8,    -7,
        -6,     -5,     -8,     -7,     -6,    -5,    -8,    -7,    -6,    -5,    -8,    -7,    -6,    -5,    -8,
        -7,     -6,     -5,     -8,     -7,    -6,    -5,    -8,    -7,    -6,    -5,    -8,    -7,    -6,    -5,
        -8,     -7,     -6,     -5,     -8,    -7,    -6,    -5};

    int Attack(SPUCHAN* ch);
    int Decay(SPUCHAN* ch);
    int Sustain(SPUCHAN* ch);
    int Release(SPUCHAN* ch);
};

}  // namespace SPU

}  // namespace PCSX
